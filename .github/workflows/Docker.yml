name: Docker Build and Test

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    strategy:
      matrix:
        version: [18, 19]
        os: [ubuntu-latest]
        exclude:
          - version: 18
            os: macos-latest

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version ${{ matrix.version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.version }}

      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Unit Testing
        id: nodejs-unit-testing
        run: npm test

      - name: Archive Test Result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Mocha-Test-Result-${{ matrix.os }}-node${{ matrix.version }}
          path: test-results.xml

  code-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup NodeJS Version 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Install Dependencies
        run: npm install

      - name: Check Code Coverage
        continue-on-error: true
        run: npm run coverage

      - name: Archive Code Coverage Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  docker:
    name: Docker
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: DockerHub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHub_USERNAME }}
          password: ${{ secrets.DOCKERHub_PASSWORD }}

  docker-build-for-testing:
    name: Docker Build For Testing
    uses: docker/build-push-action@v4
    with:
      context:
      push: false
      tags: $vars.DOCKERHUB USERNAME}}/solar-system: ${{ github.sha }}

  docker-image-testing:
    name: Docker Image Testing
    run: |
      docker images

      docker run --name solar-system-app-d \
        -p 3000:3000 \
        -e MONGO_URI=$MONGO URI \
        -e MONGO USERNAME=$MONGO USERNAME\
        -e MONGO_PASSWORD=$MONGO_PASSWORD \
        ${{vars.DOCKERHUB USERNAME}}/solar-system:${{ github.sha }}

      export IP=$(docker inspect -f '{{range NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)

      echo $IP

      echo Testing Image URL using wget

      wget -q -0 127.0.0.1:3000/live | grep live
